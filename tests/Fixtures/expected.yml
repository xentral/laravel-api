openapi: 3.1.0
info:
  title: 'My API'
  description: 'Developer API'
  contact:
    name: 'API Support'
    url: 'https://.example.com'
    email: api@example.com
  version: 1.0.0
servers:
  -
    url: 'https://.example.com'
    description: 'Your API environment'
paths:
  /api/v1/test-models:
    get:
      description: "This endpoint is only available if the feature flag `beta-users` is enabled.\n\nThis endpoint requires the following scopes: `test-models:read`.\n\nList test resources"
      operationId: 'GET::api-v1-test-models'
      parameters:
        -
          name: filter
          in: query
          description: "The filter parameter is used to filter the results of the given endpoint. \n\n\n**Supported filter operators by key:** \n\n`id`: *equals*, *notEquals*, *in*, *notIn* \n\n`name`: *equals*, *notEquals*, *in*, *notIn*, *contains*, *notContains*, *startsWith*, *endsWith* \n\n`status`: *equals*, *notEquals*, *in*, *notIn*, *contains*, *notContains*, *startsWith*, *endsWith* \n\n`created_at`:  \n\n`updated_at`: "
          required: false
          style: deepObject
          schema:
            type: array
            items:
              properties:
                key:
                  type: string
                  enum: [id, name, status, created_at, updated_at]
                op:
                  description: operator
                  type: string
                  enum: [equals, notEquals, in, notIn, contains, notContains, startsWith, endsWith]
                value:
                  description: 'value oder so'
                  oneOf: [{ title: String, type: string }, { title: Array, type: array, items: { type: string } }]
              type: object
              additionalProperties: false
        -
          name: include
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - 'test model'
        -
          name: per_page
          in: query
          description: 'Number of items per page. Default: 15, Max: 1337'
          required: false
          schema:
            type: integer
            example: 15
        -
          name: page
          in: query
          description: 'Page number.'
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 'List test resources'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/TestResource' } }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer, nullable: true }, path: { type: string }, per_page: { type: integer }, last_page: { type: integer }, to: { type: integer, nullable: true }, total: { type: integer }, links: { type: array, items: { type: object } } }, type: object }
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Unauthorized
        '429':
          description: 'Too Many Requests'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Too Many Requests' }
                type: object
      x-feature_flag: beta-users
      x-scopes:
        - 'test-models:read'
    post:
      description: 'update test resource'
      operationId: 'POST::api-v1-test-models'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestModelRequest'
      responses:
        '200':
          description: 'update test resource'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/TestResource' }
                type: object
        '422':
          description: 'Failed validation'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'The given data was invalid.' }
                  errors: { type: object, example: { name: ['The name field must be a string.'], status: ['The selected status is invalid.'] } }
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Unauthorized
        '429':
          description: 'Too Many Requests'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Too Many Requests' }
                type: object
  /api/v1/test-models-multi-pagination:
    get:
      description: 'List test resources with multiple pagination options'
      operationId: 'GET::api-v1-test-models-multi-pagination'
      parameters:
        -
          name: filter
          in: query
          description: "The filter parameter is used to filter the results of the given endpoint. \n\n\n**Supported filter operators by key:** \n\n`id`: *equals*, *notEquals*, *in*, *notIn* \n\n`name`: *equals*, *notEquals*, *in*, *notIn*, *contains*, *notContains*, *startsWith*, *endsWith* \n\n`status`: *equals*, *notEquals*, *in*, *notIn*, *contains*, *notContains*, *startsWith*, *endsWith*"
          required: false
          style: deepObject
          schema:
            type: array
            items:
              properties:
                key:
                  type: string
                  enum: [id, name, status]
                op:
                  description: operator
                  type: string
                  enum: [equals, notEquals, in, notIn, contains, notContains, startsWith, endsWith]
                value:
                  description: 'value oder so'
                  oneOf: [{ title: String, type: string }, { title: Array, type: array, items: { type: string } }]
              type: object
              additionalProperties: false
        -
          name: include
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - 'test model'
        -
          name: x-pagination
          in: header
          description: "Controls the pagination format. Available types: simple, table, cursor. Defaults to 'simple' if not specified."
          required: false
          schema:
            type: string
            enum:
              - simple
              - table
              - cursor
            example: simple
        -
          name: per_page
          in: query
          description: 'Number of items per page. Default: 15, Max: 100'
          required: false
          schema:
            type: integer
            example: 15
        -
          name: page
          in: query
          description: 'Page number. Only used with simple and table pagination.'
          required: false
          schema:
            type: integer
            example: 1
        -
          name: cursor
          in: query
          description: 'The cursor to use for the paginated call. Only used with cursor pagination. Not compatible with page parameter'
          required: false
          schema:
            type: string
            example: eyJpZCI6MTUsIl9wb2ludHNUb05leHRJdGVtcyI6dHJ1ZX0
      responses:
        '200':
          description: 'List test resources with multiple pagination options'
          content:
            application/json:
              schema:
                oneOf:
                  - { title: 'Paginated Response: simple', properties: { data: { type: array, items: { $ref: '#/components/schemas/TestResource' } }, meta: { properties: { current_page: { type: integer }, from: { type: integer, nullable: true }, path: { type: string }, per_page: { type: integer }, last_page: { type: integer }, to: { type: integer, nullable: true }, total: { type: integer }, links: { type: array, items: { type: object } } }, type: object } }, type: object }
                  - { title: 'Paginated Response: table', properties: { data: { type: array, items: { $ref: '#/components/schemas/TestResource' } }, links: { properties: { first: { type: string, nullable: true }, last: { type: string, nullable: true }, prev: { type: string, nullable: true }, next: { type: string, nullable: true } }, type: object }, meta: { properties: { current_page: { type: integer }, from: { type: integer, nullable: true }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string, nullable: true }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer, nullable: true }, total: { type: integer } }, type: object } }, type: object }
                  - { title: 'Paginated Response: cursor', properties: { data: { type: array, items: { $ref: '#/components/schemas/TestResource' } }, links: { properties: { first: { type: string, nullable: true }, last: { type: string, nullable: true }, prev: { type: string, nullable: true }, next: { type: string, nullable: true } }, type: object }, meta: { properties: { path: { type: string }, per_page: { type: integer }, next_cursor: { type: string, nullable: true }, prev_cursor: { type: string, nullable: true } }, type: object } }, type: object }
        '401':
          description: Unauthorized
        '403':
          description: Unauthorized
        '429':
          description: 'Too Many Requests'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Too Many Requests' }
                type: object
  '/api/v1/test-models/{id}':
    get:
      description: 'get test resource'
      operationId: 'GET::api-v1-test-models-id'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: include
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - 'test resource'
      responses:
        '200':
          description: 'get test resource'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/TestResource' }
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Unauthorized
        '404':
          description: 'Not Found'
        '429':
          description: 'Too Many Requests'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Too Many Requests' }
                type: object
    delete:
      description: 'delete test resource'
      operationId: 'DELETE::api-v1-test-models-id'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Resource successfully deleted'
        '401':
          description: Unauthorized
        '403':
          description: Unauthorized
        '404':
          description: 'Not Found'
        '429':
          description: 'Too Many Requests'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Too Many Requests' }
                type: object
    patch:
      description: 'update test resource'
      operationId: 'PATCH::api-v1-test-models-id'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTestModelRequest'
      responses:
        '200':
          description: 'update test resource'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/TestResource' }
                type: object
        '422':
          description: 'Failed validation'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'The given data was invalid.' }
                  errors: { type: object, example: { name: ['The name field is invalid.'], status: ['The status field is invalid.'] } }
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Unauthorized
        '429':
          description: 'Too Many Requests'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Too Many Requests' }
                type: object
  '/api/v1/test-models/{id}/actions/test':
    patch:
      description: 'Execute test action on test resource'
      operationId: 'PATCH::api-v1-test-models-id-actions-test'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'No Content'
        '401':
          description: Unauthorized
        '403':
          description: Unauthorized
        '429':
          description: 'Too Many Requests'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Too Many Requests' }
                type: object
  '/api/v1/test-models/{id}/legacy':
    get:
      description: 'Legacy endpoint for test resource'
      operationId: 'GET::api-v1-test-models-id-legacy'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Legacy endpoint for test resource'
          headers:
            Sunset:
              description: 'This endpoint is deprecated and will be sunset on the example date. If an endpoint is over this date but still accessible, it can be removed any time.'
              schema:
                type: string
                format: http-date
                example: 'Thu, 01 Jan 2026 00:00:00 GMT'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/TestResource' }
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Unauthorized
        '404':
          description: 'Not Found'
        '429':
          description: 'Too Many Requests'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Too Many Requests' }
                type: object
      deprecated: true
components:
  schemas:
    CreateTestModelRequest:
      properties:
        name:
          type: string
        status:
          enum:
            - active
            - inactive
            - pending
      type: object
      additionalProperties: false
    TestResource:
      required:
        - id
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          enum:
            - active
            - inactive
            - pending
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      type: object
      additionalProperties: false
    UpdateTestModelRequest:
      properties:
        name:
          type:
            - string
            - 'null'
        status:
          type:
            - string
            - 'null'
          enum:
            - active
            - inactive
            - pending
      type: object
      additionalProperties: false
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
security:
  -
    BearerAuth: []
